function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Vue from '../../utils/vue';
import KeyCodes from '../../utils/key-codes';
import { contains } from '../../utils/dom';
import { getComponentConfig } from '../../utils/config';
import { toString } from '../../utils/string';
import idMixin from '../../mixins/id';
import listenOnRootMixin from '../../mixins/listen-on-root';
import normalizeSlotMixin from '../../mixins/normalize-slot';
import { EVENT_TOGGLE, EVENT_STATE, EVENT_STATE_REQUEST, EVENT_STATE_SYNC } from '../../directives/toggle/toggle';
import { BButtonClose } from '../button/button-close';
import { BIconX } from '../../icons/icons'; // --- Constants ---

var NAME = 'BSidebar';
var CLASS_NAME = 'b-sidebar'; // --- Render methods ---

var renderHeaderTitle = function renderHeaderTitle(h, ctx) {
  var title = ctx.normalizeSlot('title', ctx.slotScope) || toString(ctx.title) || null; // Render a empty `<span>` when to title was provided

  if (!title) {
    return h('span');
  }

  return h('strong', {
    attrs: {
      id: ctx.safeId('__title__')
    }
  }, [title]);
};

var renderHeaderClose = function renderHeaderClose(h, ctx) {
  if (ctx.noHeaderClose) {
    return h();
  }

  var closeLabel = ctx.closeLabel,
      textVariant = ctx.textVariant,
      hide = ctx.hide;
  return h(BButtonClose, {
    ref: 'close-button',
    props: {
      ariaLabel: closeLabel,
      textVariant: textVariant
    },
    on: {
      click: hide
    }
  }, [ctx.normalizeSlot('header-close') || h(BIconX)]);
};

var renderHeader = function renderHeader(h, ctx) {
  if (ctx.noHeader) {
    return h();
  }

  var $title = renderHeaderTitle(h, ctx);
  var $close = renderHeaderClose(h, ctx);
  return h('header', {
    key: 'header',
    staticClass: "".concat(CLASS_NAME, "-header"),
    class: ctx.headerClass
  }, ctx.right ? [$close, $title] : [$title, $close]);
};

var renderBody = function renderBody(h, ctx) {
  return h('div', {
    key: 'body',
    staticClass: "".concat(CLASS_NAME, "-body"),
    class: ctx.bodyClass
  }, [ctx.normalizeSlot('default', ctx.slotScope)]);
};

var renderFooter = function renderFooter(h, ctx) {
  var $footer = ctx.normalizeSlot('footer', ctx.slotScope);

  if (!$footer) {
    return h();
  }

  return h('footer', {
    key: 'footer',
    staticClass: "".concat(CLASS_NAME, "-footer"),
    class: ctx.footerClass
  }, [$footer]);
};

var renderContent = function renderContent(h, ctx) {
  // We render the header even if `lazy` is enabled as it
  // acts as the accessible label for the sidebar
  var $header = renderHeader(h, ctx);

  if (ctx.lazy && !ctx.isOpen) {
    return $header;
  }

  return [$header, renderBody(h, ctx), renderFooter(h, ctx)];
}; // --- Main component ---
// @vue/component


export var BSidebar = /*#__PURE__*/Vue.extend({
  name: NAME,
  mixins: [idMixin, listenOnRootMixin, normalizeSlotMixin],
  model: {
    prop: 'visible',
    event: 'change'
  },
  props: {
    title: {
      type: String // default: null

    },
    right: {
      type: Boolean,
      default: false
    },
    bgVariant: {
      type: String,
      default: function _default() {
        return getComponentConfig(NAME, 'bgVariant');
      }
    },
    textVariant: {
      type: String,
      default: function _default() {
        return getComponentConfig(NAME, 'textVariant');
      }
    },
    shadow: {
      type: [Boolean, String],
      default: function _default() {
        return getComponentConfig(NAME, 'shadow');
      }
    },
    width: {
      type: String,
      default: function _default() {
        return getComponentConfig(NAME, 'width');
      }
    },
    zIndex: {
      type: [Number, String] // default: null

    },
    ariaLabel: {
      type: String // default: null

    },
    ariaLabelledby: {
      type: String // default: null

    },
    closeLabel: {
      // `aria-label` for close button
      // Defaults to 'Close'
      type: String // default: undefined

    },
    tag: {
      type: String,
      default: function _default() {
        return getComponentConfig(NAME, 'tag');
      }
    },
    headerClass: {
      type: [String, Array, Object] // default: null

    },
    bodyClass: {
      type: [String, Array, Object] // default: null

    },
    footerClass: {
      type: [String, Array, Object] // default: null

    },
    noSlide: {
      type: Boolean,
      default: false
    },
    noHeader: {
      type: Boolean,
      default: false
    },
    noHeaderClose: {
      type: Boolean,
      default: false
    },
    noCloseOnEsc: {
      type: Boolean,
      default: false
    },
    noCloseOnRouteChange: {
      type: Boolean,
      default: false
    },
    lazy: {
      type: Boolean,
      default: false
    },
    visible: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      // Internal `v-model` state
      localShow: !!this.visible,
      // For lazy render triggering
      isOpen: !!this.visible
    };
  },
  computed: {
    transitionProps: function transitionProps() {
      return this.noSlide ? {
        css: true
      } : {
        css: true,
        enterClass: '',
        enterActiveClass: 'slide',
        enterToClass: 'show',
        leaveClass: 'show',
        leaveActiveClass: 'slide',
        leaveToClass: ''
      };
    },
    slotScope: function slotScope() {
      return {
        visible: this.localShow,
        right: this.right,
        hide: this.hide
      };
    }
  },
  watch: {
    visible: function visible(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.localShow = newVal;
      }
    },
    localShow: function localShow(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.emitState(newVal);
        this.$emit('change', newVal);
      }
    },
    $route: function $route()
    /* istanbul ignore next: pain to mock */
    {
      var newVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var oldVal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!this.noCloseOnRouteChange && newVal.fullPath !== oldVal.fullPath) {
        this.hide();
      }
    }
  },
  created: function created() {
    // Define non-reactive properties
    this.$_returnFocusEl = null;
  },
  mounted: function mounted() {
    var _this = this;

    // Add `$root` listeners
    this.listenOnRoot(EVENT_TOGGLE, this.handleToggle);
    this.listenOnRoot(EVENT_STATE_REQUEST, this.handleSync); // Send out a gratuitous state event to ensure toggle button is synced

    this.$nextTick(function () {
      _this.emitState(_this.localShow);
    });
  },
  activated: function activated()
  /* istanbul ignore next */
  {
    this.emitSync();
  },
  beforeDestroy: function beforeDestroy() {
    this.localShow = false;
    this.$_returnFocusEl = null;
  },
  methods: {
    hide: function hide() {
      this.localShow = false;
    },
    emitState: function emitState() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.localShow;
      this.emitOnRoot(EVENT_STATE, this.safeId(), state);
    },
    emitSync: function emitSync() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.localShow;
      this.emitOnRoot(EVENT_STATE_SYNC, this.safeId(), state);
    },
    handleToggle: function handleToggle(id) {
      // Note `safeId()` can be null until after mount
      if (id && id === this.safeId()) {
        this.localShow = !this.localShow;
      }
    },
    handleSync: function handleSync(id) {
      var _this2 = this;

      // Note `safeId()` can be null until after mount
      if (id && id === this.safeId()) {
        this.$nextTick(function () {
          _this2.emitSync(_this2.localShow);
        });
      }
    },
    onKeydown: function onKeydown(evt) {
      var keyCode = evt.keyCode;

      if (!this.noCloseOnEsc && keyCode === KeyCodes.ESC) {
        this.hide();
      }
    },
    onBeforeEnter: function onBeforeEnter() {
      this.$_returnFocusEl = null;

      try {
        this.$_returnFocusEl = document.activeElement || null;
      } catch (_unused) {} // Trigger lazy render


      this.isOpen = true;
    },
    onAfterEnter: function onAfterEnter(el) {
      try {
        if (!contains(el, document.activeElement)) {
          el.focus();
        }
      } catch (_unused2) {}

      this.$emit('shown');
    },
    onAfterLeave: function onAfterLeave() {
      try {
        this.$_returnFocusEl.focus();
      } catch (_unused3) {}

      this.$_returnFocusEl = null; // Trigger lazy render

      this.isOpen = false;
      this.$emit('hidden');
    }
  },
  render: function render(h) {
    var _class;

    var localShow = this.localShow;
    var shadow = this.shadow === '' ? true : this.shadow;
    var title = this.normalizeSlot('title', this.slotScope) || toString(this.title) || null;
    var titleId = title ? this.safeId('__title__') : null;
    var ariaLabel = this.ariaLabel || null; // `ariaLabel` takes precedence over `ariaLabelledby`

    var ariaLabelledby = this.ariaLabelledby || titleId || null;
    var $sidebar = h(this.tag, {
      directives: [{
        name: 'show',
        value: localShow
      }],
      staticClass: CLASS_NAME,
      class: (_class = {
        shadow: shadow === true
      }, _defineProperty(_class, "shadow-".concat(shadow), shadow && shadow !== true), _defineProperty(_class, "".concat(CLASS_NAME, "-right"), this.right), _defineProperty(_class, "bg-".concat(this.bgVariant), !!this.bgVariant), _defineProperty(_class, "text-".concat(this.textVariant), !!this.textVariant), _class),
      attrs: {
        id: this.safeId(),
        tabindex: '-1',
        role: 'dialog',
        'aria-modal': 'false',
        'aria-hidden': localShow ? 'true' : null,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledby
      },
      style: {
        width: this.width,
        zIndex: this.zIndex
      },
      on: {
        keydown: this.onKeydown
      }
    }, [renderContent(h, this)]);
    return h('transition', {
      props: this.transitionProps,
      on: {
        beforeEnter: this.onBeforeEnter,
        afterEnter: this.onAfterEnter,
        afterLeave: this.onAfterLeave
      }
    }, [$sidebar]);
  }
});